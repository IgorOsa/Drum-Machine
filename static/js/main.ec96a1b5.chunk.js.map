{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["soundBank","keyCode","keyTrigger","id","url","activeStyle","backgroundColor","marginTop","inactiveStyle","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","padStyle","playSound","bind","assertThisInitialized","handleKeyPress","activatePad","document","addEventListener","removeEventListener","e","setState","_this2","sound","getElementById","currentTime","play","setTimeout","updateDisplay","clipId","replace","react_default","a","createElement","onClick","className","style","src","clip","React","Component","PadBank","padBank","_this3","map","drumObj","i","padBankArr","App_DrumPad","App","_this4","display","String","fromCharCode","displayClipName","clearDisplay","name","App_PadBank","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec96a1b5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst soundBank = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Heater-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Heater-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Heater-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Heater-4',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Clap',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: \"Kick-n'-Hat\",\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n},\n];\n\nconst activeStyle = {\n  backgroundColor: 'greenyellow',\n  marginTop: 10\n}\n\nconst inactiveStyle = {\n  backgroundColor: 'grey',\n  marginTop: 10\n}\n\nclass DrumPad extends React.Component {\nconstructor(props) {\n  super(props);\n  this.state = {\n    padStyle: inactiveStyle\n  }\n  this.playSound = this.playSound.bind(this);\n  this.handleKeyPress = this.handleKeyPress.bind(this);\n  this.activatePad = this.activatePad.bind(this);\n}\ncomponentDidMount() {\n  document.addEventListener('keydown', this.handleKeyPress);\n}\ncomponentWillUnmount() {\n  document.removeEventListener('keydown', this.handleKeyPress);\n}\nhandleKeyPress(e) {\n  if (e.keyCode === this.props.keyCode) {\n    this.playSound();\n  }\n}\nactivatePad() {\n  this.state.padStyle.backgroundColor === activeStyle.backgroundColor ?\n    this.setState({\n      padStyle: inactiveStyle\n    }) :\n    this.setState({\n      padStyle: activeStyle\n  });\n}\nplaySound(e) {\n  const sound = document.getElementById(this.props.keyTrigger);\n  sound.currentTime = 0;\n  sound.play();\n  this.activatePad();\n  setTimeout(() => this.activatePad(), 100);\n  this.props.updateDisplay(this.props.clipId.replace(/-/g, ' '));\n}\nrender() {\n  return (\n    <div id={this.props.clipId} \n      onClick={this.playSound} \n      className=\"drum-pad\" \n      style={this.state.padStyle} >\n        <audio className='clip' id={this.props.keyTrigger} src={this.props.clip}></audio>\n        {this.props.keyTrigger}\n    </div>\n  )\n}\n}\n\nclass PadBank extends React.Component {\nrender() {\n  let padBank;\n  padBank = soundBank.map((drumObj, i, padBankArr) => {\n    return (\n      <DrumPad \n          clipId={padBankArr[i].id} \n          clip={padBankArr[i].url}\n          keyTrigger={padBankArr[i].keyTrigger}\n          keyCode={padBankArr[i].keyCode} \n          updateDisplay={this.props.updateDisplay} \n      />\n    )\n  })\n  return (\n    <div className=\"pad-bank\" >\n      {padBank}\n    </div>\n  )\n}\n}\n\nclass App extends React.Component {\nconstructor(props) {\n  super(props);\n  this.state = {\n    display: String.fromCharCode(160),\n  }\n  this.displayClipName = this.displayClipName.bind(this);\n  this.clearDisplay = this.clearDisplay.bind(this);\n}\ndisplayClipName(name) {\n  this.setState({\n      display: name\n  });\n}\nclearDisplay() {\n  this.setState({\n    display: String.fromCharCode(160)\n  });\n}\nrender() {\n  return (\n    <div id=\"drum-machine\" className=\"inner-container\">\n      <h2 className=\"heading\">FCC Drum Machine</h2>\n      <PadBank  \t\n        updateDisplay={this.displayClipName}\n      />\n      <div className=\"controls-container\">\n        <p id=\"display\">\n          {this.state.display}\n        </p>\n      </div>\n\n    </div>\n  )\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}